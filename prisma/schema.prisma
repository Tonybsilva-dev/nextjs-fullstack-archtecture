generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  TENANT
  CUSTOMER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Tenant {
  id         String    @id @default(uuid()) @map("id")
  name       String    @map("name")
  uniqueName String    @map("unique_name")
  secret     String    @map("secret")
  status     Status    @default(PENDING) @map("status")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @updatedAt @map("deleted_at")

  users         User[]          @relation("tenant_users")
  Account       Account[]
  company       Company[]
  ActivityLog   ActivityLog[]
  TenantSetting TenantSetting[]

  @@map("tenants")
}

model Company {
  id            String  @id @default(uuid()) @map("id")
  document      String  @unique @map("document")
  name          String  @map("name")
  description   String? @map("description")
  address       String? @map("address")
  phone         String? @map("phone")
  email         String? @map("email")
  latitude      Float?  @map("latitude")
  longitude     Float?  @map("longitude")
  logoUrl       String  @map("logo_url")
  status        Status  @default(PENDING) @map("status")
  tenantId      String
  tenant        Tenant  @relation(fields: [tenantId], references: [id])
  productCount  Int     @default(0) @map("product_count")
  customerCount Int     @default(0) @map("customer_count")
  categoryCount Int     @default(0) @map("category_count")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  categories Category[] @relation("company_categories")
  products   Product[]  @relation("company_products")

  @@unique([document, tenantId])
  @@map("companies")
}

model Category {
  id        String    @id @default(uuid()) @map("id")
  name      String    @map("name")
  companyId String    @map("company_id")
  company   Company   @relation("company_categories", fields: [companyId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  products Product[] @relation("product_categories")

  @@map("categories")
}

model Product {
  id        String    @id @default(uuid()) @map("id")
  name      String    @map("name")
  price     Float     @map("price")
  companyId String    @map("company_id")
  company   Company   @relation("company_products", fields: [companyId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  categories Category[] @relation("product_categories")

  @@map("products")
}

model Account {
  id                String      @id @default(uuid())
  userId            String      @map("user_id")
  type              AccountType @default(CUSTOMER) @map("type")
  provider          String      @map("provider")
  providerAccountId String      @map("provider_account_id")
  refreshToken      String?     @map("refresh_token")
  accessToken       String?     @map("access_token")
  expiresAt         Int?        @map("expires_at")
  tokenType         String?     @map("token_type")
  scope             String?     @map("scope")
  idToken           String?     @map("id_token")
  sessionState      String?     @map("session_state")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  deletedAt         DateTime?   @map("deleted_at")

  user     User    @relation(fields: [userId], references: [id])
  tenantId String? @map("tenant_id")
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?   @map("name")
  email         String?   @unique @map("email")
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?   @map("image")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  accounts    Account[]
  sessions    Session[]
  preferences UserPreference[]

  tenantId String? @map("tenant_id")
  tenant   Tenant? @relation("tenant_users", fields: [tenantId], references: [id])

  @@map("users")
}

model UserPreference {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  key       String
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_preferences")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String   @map("identifier")
  token      String   @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ActivityLog {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  action      String   @map("action") // e.g., "COMPANY_APPROVAL"
  description String   @map("description")
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([tenantId, createdAt])
  @@map("activity_logs")
}

model TenantSetting {
  id        String    @id @default(uuid())
  tenantId  String    @map("tenant_id")
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  key       String    @map("key") // e.g., "auto_approve_companys"
  value     String    @map("value") // e.g., "true"
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("tenant_settings")
}

model Address {
  id        String    @id @default(uuid()) @map("id")
  street    String
  city      String
  state     String
  zipCode   String    @map("zip_code")
  country   String
  latitude  Float?
  longitude Float?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("addresses")
}
