generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  OWNER
  CUSTOMER
}

model Tenant {
  id        String   @id @default(uuid()) @map("id")
  name      String   @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users   User[]    @relation("tenant_users")
  stores  Store[]   @relation("tenant_stores")
  Account Account[]

  @@map("tenants")
}

model Store {
  id        String    @id @default(uuid()) @map("id")
  name      String    @map("name")
  tenantId  String    @map("tenant_id")
  tenant    Tenant    @relation("tenant_stores", fields: [tenantId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  categories Category[] @relation("store_categories")
  products   Product[]  @relation("store_products")

  @@map("stores")
}

model Category {
  id        String    @id @default(uuid()) @map("id")
  name      String    @map("name")
  storeId   String    @map("store_id")
  store     Store     @relation("store_categories", fields: [storeId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  products Product[] @relation("product_categories")

  @@map("categories")
}

model Product {
  id        String    @id @default(uuid()) @map("id")
  name      String    @map("name")
  price     Float     @map("price")
  storeId   String    @map("store_id")
  store     Store     @relation("store_products", fields: [storeId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  categories Category[] @relation("product_categories")

  @@map("products")
}

model Account {
  id                String      @id @default(uuid())
  userId            String      @map("user_id")
  type              AccountType @default(CUSTOMER) @map("type")
  provider          String      @map("provider")
  providerAccountId String      @map("provider_account_id")
  refreshToken      String?     @map("refresh_token")
  accessToken       String?     @map("access_token")
  expiresAt         Int?        @map("expires_at")
  tokenType         String?     @map("token_type")
  scope             String?     @map("scope")
  idToken           String?     @map("id_token")
  sessionState      String?     @map("session_state")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  deletedAt         DateTime?   @map("deleted_at")

  user     User    @relation(fields: [userId], references: [id])
  tenantId String? @map("tenant_id")
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?   @map("name")
  email         String?   @unique @map("email")
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?   @map("image")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  accounts    Account[]
  sessions    Session[]
  preferences UserPreference[]

  tenantId String? @map("tenant_id")
  tenant   Tenant? @relation("tenant_users", fields: [tenantId], references: [id])

  @@map("users")
}

model UserPreference {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  key       String
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@map("user_preferences")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String   @map("identifier")
  token      String   @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("verificationtokens")
}
